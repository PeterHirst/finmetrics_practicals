knitr::opts_chunk$set(echo = FALSE, message = FALSE, warning = FALSE, fig.width = 6, fig.height = 5, fig.pos="H", fig.pos = 'H')
# Note: Include = FALSE implies the code is executed, but not printed in your pdf.
# warning and message = FALSE implies ugly messages and warnings are removed from your pdf. These should be picked up when you execute the command chunks (code sections below) in your rmd, not printed in your paper!
library(dplyr)
library(readr)
library(ggplot2)
if (!file.exists(file.path(getwd(), "code/Example_Plot_Scatter.R"))) {
# This is just a random plot to show you a plot. This is done if the getwd() does not point to your Template's directory.
# Set WD below to your project's working directory.
g <-
ggplot(data = mtcars %>% tbl_df()) + # All data must be tbl_df()::: class(mtcars %>% tbl_df())
geom_point(aes(x = disp, y = hp, color = cyl)) +
theme_bw() +
# theme(legend.position = "none") +
theme(plot.title = element_text(size = 10)) +
theme(axis.title = element_text(size = 10),
axis.title.x = element_text()) +
ylab("y-axis") +
xlab("x-axis")
print(g)
} else {
# ----------  Using your Code and Data folders to manage your Template:
#------------------- To make this work, change WD to your project's directory:
WD <- getwd()
# Load ExampleData using read_rds or read_csv from readr package:
ExampleData <- read_csv( file.path(WD, "data/ExampleData.csv") )
source( file.path(WD, "code/Example_Plot_Scatter.R") ) # Load a function from your 'code' folder. This e.g. plots scatters to your own preferences.
source( file.path(WD, "code/Data_Create.R") ) #
ExampleData <- Data_Create(N = 100) # Same as the ExampleData loaded above - this is just a function to create the stored data.
g <- Example_Plot_Scatter(DataInput = ExampleData,
X = "Height_Score",
Y = "Weight_Score",
Z = "Agility_Score",
Theme = theme_bw(), # run ?ggthemes for other themes.
Title = "", # I prefer to use the caption set above.
Ylab = "Height",
Xlab = "Lenght",
LegendTitle = "Agility",
TitleSize = 10,
LabSize = 10)
print(g)
}
# Although the functions above are really simple, the principle is simple: containing calculations and data wrangling in their own functions will make this template much cleaner and manageable.
# When you start working, delete these meaningless functions and replace with your own...
g <-
ggplot(diamonds, aes(depth, fill = cut, colour = cut)) +
geom_density(alpha = 0.3) +
theme_bw()
print(g)
library(xtable)
data <- mtcars[1:5,] %>% tbl_df()
table <- xtable(data, caption = "Short Table Example \\label{tab1}")
print.xtable(table,
# tabular.environment = "longtable",
floating = TRUE,
table.placement = 'H',
# scalebox = 0.3,
comment = FALSE,
caption.placement = 'bottom'
)
library(xtable)
data = mtcars %>% tbl_df()
addtorow          <- list()
addtorow$pos      <- list()
addtorow$pos[[1]] <- c(0)
addtorow$command  <- c(paste("\\hline \n",
"\\endhead \n",
"\\hline \n",
"{\\footnotesize Continued on next page} \n",
"\\endfoot \n",
"\\endlastfoot \n",sep=""))
table <- xtable(data, caption = "Long Table Example")
print.xtable(table,
tabular.environment = "longtable",
floating = FALSE, # Leave this as is.
table.placement = 'H', # Leave this as is.
booktabs = T, # Aesthetics
include.rownames = FALSE,  # Typically you don't want this in a table.
add.to.row = addtorow, # For adding the Continued on next page part...
comment = FALSE,
caption.placement = 'bottom',  # Where do you want the caption?
size="\\fontsize{12pt}{13pt}\\selectfont"  # Size of text in table..
)
# See https://cran.r-project.org/web/packages/xtable/vignettes/xtableGallery.pdf for table inspiration
library(huxtable)
data(diamonds, package = 'ggplot2')
Title <- "Regression Output"
Label <- "Reg01"
lm1 <- lm(price ~ carat, diamonds)
lm2 <- lm(price ~ depth, diamonds)
lm3 <- lm(price ~ carat + depth, diamonds)
lm4 <- lm(price ~ carat*depth, diamonds)
htab <-
huxreg(lm1, lm2, lm3, lm4,
statistics = c(N = "nobs", R2 = "r.squared"),
note = "%stars%.") %>%
set_caption(Title) %>%
set_label(Label) %>%
set_width(.6)
# More settings:
font_size(htab) <- 10
# Let's change regression names: this is slightly hacky, but works. Comment out this section to see what the default looks like:
Names <- c("Reg1", "Reg2", "Reg3", "Reg4")
for(i in 1:ncol(htab)) {
htab[1,][[1+i]] <- Names[i]
}
# Now simply call the table:
htab
print(g)
