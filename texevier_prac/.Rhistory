)
# Chunk 3
#pairs.panels(returns %>% select(-Date, -Scores, -LogReturns) %>% spread(Tickers, Returns), na.omit())
library(xtable)
library(psych)
library(rmsfuns)
load_pkg(c("tidyverse", "devtools", "rugarch", "forecast", "tbl2xts",
"lubridate", "PerformanceAnalytics", "ggthemes"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
col_types = cols(.default = "d", Date = "D"))
# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)
#tidy it up
tidydata <-
dailydata %>%
gather(key = Tickers, value = Scores, -Date)
#calculate returns
returns <-
tidydata %>%
group_by(Tickers) %>%
mutate(Returns = Scores/lag(Scores) - 1) %>%
mutate(LogReturns = (log(Returns) - log(lag(Returns))))
# period 1
period1summary <-
returns %>%
filter(Date >= ymd(20060518) & Date<= ymd(20081231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table1 <-
xtable(period1summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2006-2008 \\label{tab1}")
print.xtable(table1,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
# period 2
period2summary <-
returns %>%
filter(Date >= ymd(20100101) & Date<= ymd(20131231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table2 <-
xtable(period2summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2010-2013 \\label{tab2}")
print.xtable(table2,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
library(xtable)
library(psych)
library(rmsfuns)
load_pkg(c("tidyverse", "devtools", "rugarch", "forecast", "tbl2xts",
"lubridate", "PerformanceAnalytics", "ggthemes"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
col_types = cols(.default = "d", Date = "D"))
# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)
#tidy it up
tidydata <-
dailydata %>%
gather(key = Tickers, value = Scores, -Date)
#calculate returns
returns <-
tidydata %>%
group_by(Tickers) %>%
mutate(Returns = Scores/lag(Scores) - 1) %>%
mutate(LogReturns = (log(Returns) - log(lag(Returns))))
# period 1
period1summary <-
returns %>%
filter(Date >= ymd(20060518) & Date<= ymd(20081231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table1 <-
xtable(period1summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2006-2008 \\label{tab1}")
print.xtable(table1,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
# period 2
period2summary <-
returns %>%
filter(Date >= ymd(20100101) & Date<= ymd(20131231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table2 <-
xtable(period2summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2010-2013 \\label{tab2}")
print.xtable(table2,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
library(xtable)
library(psych)
library(rmsfuns)
load_pkg(c("tidyverse", "devtools", "rugarch", "forecast", "tbl2xts",
"lubridate", "PerformanceAnalytics", "ggthemes"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
col_types = cols(.default = "d", Date = "D"))
#dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
#    col_types = cols(.default = "d", Date = "D"))
# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)
#tidy it up
tidydata <-
dailydata %>%
gather(key = Tickers, value = Scores, -Date)
returns <-
tidydata %>%
group_by(Tickers) %>%
mutate(Returns = Scores/lag(Scores) - 1) %>%
mutate(LogReturns = (log(Returns) - log(lag(Returns))))
# period 1
period1summary <-
returns %>%
filter(Date >= ymd(20060518) & Date<= ymd(20081231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table1 <-
xtable(period1summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2006-2008 \\label{tab1}")
print.xtable(table1,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
# period 2
period2summary <-
returns %>%
filter(Date >= ymd(20100101) & Date<= ymd(20131231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table2 <-
xtable(period2summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2010-2013 \\label{tab2}")
print.xtable(table2,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
View(dailydata)
library(rportfolios)
if (!require("rportfolios")) install.packages("rportfolios")
library(rportfolios)
# Drop the unnecessary
returns$LogReturns <- NULL
# Rebalancing
RebMonths <- c(6)
Weights <-
returns %>%
mutate(Months = as.double(format(Date, format = "%m")), YearMonths = as.double(format(Date, format = "%Y%m"))) %>%
filter(Months %in% RebMonths) %>%
group_by(YearMonths, Months, Tickers) %>%
filter(Date == last(Date)) %>%
ungroup()
View(Weights)
Weights_adj <-
Weights %>%
group_by(Date) %>%
mutate(EqualWeights = 1/n()) %>%
ungroup() %>%
select(-Months, -YearMonths, -Date1)
# Now we have to add the actual weights to the vector at each rebalancing
Weights_adj <-
Weights %>%
group_by(Date) %>%
mutate(EqualWeights = 1/n()) %>%
ungroup() %>%
select(-Months, -YearMonths)
View(Weights_adj)
View(Weights)
EW_weights <- Weights_adj %>%
select(Date, Tickers, EqualWeights) %>%
spread(Tickers, EqualWeights) %>% tbl_xts()
# Isolate the returns
df_Returns <- returns %>% spread(Tickers, Returns)
df_Returns[is.na(df_Returns)] <- 0 # this sets the NA values to zero
xts_df_Returns <- df_Returns %>% tbl_xts() # basically, here we just get the returns in xts format
# Create the equally weighted portfolio
EW_RetPort <- Return.portfolio(xts_df_Returns, weights = EW_weights,
verbose = TRUE, contribution = TRUE, value = Fund_Size_at_Start,
geometric = TRUE)
View(xts_df_Returns)
View(df_Returns)
View(xts_df_Returns)
# Isolate the returns
df_Returns <- returns %>% spread(Tickers, Returns)
View(df_Returns)
df_Returns[is.na(df_Returns)] <- 0 # this sets the NA values to zero
View(df_Returns)
View(returns)
returns$Scores <- NULL
RebMonths <- c(6)
# Create the weights vector
Weights <-
returns %>%
mutate(Months = as.double(format(Date, format = "%m")), YearMonths = as.double(format(Date, format = "%Y%m"))) %>%
filter(Months %in% RebMonths) %>%
group_by(YearMonths, Months, Tickers) %>%
filter(Date == last(Date)) %>%
ungroup()
# Now we have to add the actual weights to the vector at each rebalancing
Weights_adj <-
Weights %>%
group_by(Date) %>%
mutate(EqualWeights = 1/n()) %>%
ungroup() %>%
select(-Months, -YearMonths)
# Next task is to create a portfollio
library(PerformanceAnalytics)
Fund_Size_at_Start <- 1000
# Remember when using PA, the data must be xts and wide
# Create the equal weights to feed into the function later on
EW_weights <- Weights_adj %>%
select(Date, Tickers, EqualWeights) %>%
spread(Tickers, EqualWeights) %>% tbl_xts()
# Isolate the returns
df_Returns <- returns %>% spread(Tickers, Returns)
df_Returns[is.na(df_Returns)] <- 0 # this sets the NA values to zero
xts_df_Returns <- df_Returns %>% tbl_xts()
View(xts_df_Returns)
EW_RetPort <- Return.portfolio(xts_df_Returns, weights = EW_weights,
verbose = TRUE, contribution = TRUE, value = Fund_Size_at_Start,
geometric = TRUE)
View(EW_RetPort)
View(EW_RetPort)
EW_Contribution <-
EW_RetPort$contribution %>%
xts_tbl() %>%
mutate(date = lag(Date), date = coalesce(Date, index(EW_weights)[1]))
EW_BPWeight <-
EW_RetPort$BOP.Weight %>%
xts_tbl() %>%
mutate(date = lag(Date),
date = coalesce(Date, index(EW_weights)[1]))
EW_BPValue <-
EW_RetPort$BOP.Value %>%
xts_tbl() %>%
mutate(date = lag(Date),
date = coalesce(Date, index(EW_weights)[1]))
EW_Contribution <-
EW_RetPort$contribution %>%
xts_tbl() %>%
mutate(date = lag(date), date = coalesce(date, index(EW_weights)[1]))
EW_BPWeight <-
EW_RetPort$BOP.Weight %>%
xts_tbl() %>%
mutate(date = lag(date),
date = coalesce(date, index(EW_weights)[1]))
View(EW_BPWeight)
EW_BPValue <-
EW_RetPort$BOP.Value %>%
xts_tbl() %>%
mutate(date = lag(date),
date = coalesce(date, index(EW_weights)[1]))
View(EW_Contribution)
names(EW_Contribution) <- c("date", names(EW_RetPort$contribution))
names(EW_BPWeight) <- c("date", names(EW_RetPort$BOP.Weight))
names(EW_BPValue) <- c("date", names(EW_RetPort$BOP.Value))
View(EW_Contribution)
View(returns)
df_port_return_EW <-
left_join(returns %>%
rename(date = Date),
EW_BPWeight %>%
gather(Tickers, weight, -date), by = c("date",
"Tickers")) %>% left_join(., EW_BPValue %>% gather(Tickers,
value_held, -date), by = c("date", "Tickers")) %>%
left_join(.,
EW_Contribution %>%
gather(Tickers, Contribution, -date),
by = c("date", "Tickers"))
View(df_port_return_EW)
# Portfolio return
df_Portf_EW <- df_port_return_EW %>% group_by(date) %>% summarise(PortfolioReturn = sum(Returns *
weight, na.rm = TRUE)) %>% filter(PortfolioReturn != 0)
View(df_Portf_EW)
Cum_EW <-
df_Portf_EW %>%
mutate(cumreturn_EW = (cumprod(1 +
PortfolioReturn) - 1)) %>%
mutate(wealthindex_EW = 100 *
(cumprod(1 + PortfolioReturn))) %>% select(-PortfolioReturn)
View(Cum_EW)
Cum_EW %>% filter(grepl("wealthindex", Type)) %>% ggplot() +
geom_line(aes(date, Value, color = Type))
View(Cum_EW)
ggplot() + geom_line(aes(date, Value, color = wealthindex))
Cum_EW %>% filter(grepl("wealthindex", type)) %>% ggplot() +
geom_line(aes(date, value, color = type))
Cum_EW %>% filter(grepl("wealthindex")) %>% ggplot() +
geom_line(aes(date, value))
Cum_EW$wealthindex_EW %>%
ggplot() +
geom_line(aes(date, Value, color = Type))
View(Cum_EW)
# Now we can go ahead and plot the wealth index (i.e. if you invested R100 yesterday, how much would you have now?)
Cum_EW %>%
ggplot() +
geom_line(aes(date, wealthindex_EW, color = "steelblue"))
# Now we can go ahead and plot the wealth index (i.e. if you invested R100 yesterday, how much would you have now?)
Cum_EW %>%
ggplot() +
geom_line(aes(date, wealthindex_EW, color = "wealth index"))
library(ggthemes)
Cum_EW %>%
ggplot() +
geom_line(aes(date, wealthindex_EW, color = "wealth index")) +
theme_bw()
Cum_EW %>%
ggplot() +
geom_line(aes(date, wealthindex_EW, color = "wealth index")) +
theme_bw() + labs(x = "Date", y = "Growth")
View(dailydata)
print.xtable(xtable(cor(dailydata[, c(2:8)], use = "complete.obs"),
caption = "Full sample correlations betweeb stocks \\lable{correlations}"),
floating = T,
table.placement = 'H',
scalebox = "0.7",
comment = F,
caption.placement = 'bottom'
)
print.xtable(xtable(cor(dailydata[, c(2:8)], use = "complete.obs"),
caption = "Full sample correlations between stocks \\lable{correlations}"),
floating = T,
table.placement = 'H',
scalebox = "0.7",
comment = F,
caption.placement = 'bottom'
)
View(dailydata)
citation("Texevier")
View(dailydata)
library(xtable)
library(psych)
library(rmsfuns)
load_pkg(c("tidyverse", "devtools", "rugarch", "forecast", "tbl2xts",
"lubridate", "PerformanceAnalytics", "ggthemes"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
col_types = cols(.default = "d", Date = "D"))
# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)
# Write to project folder
write.csv(dailydata, path = file.path('/data', "Brics.rds"))
#tidy it up
tidydata <-
dailydata %>%
gather(key = Tickers, value = Scores, -Date)
#calculate returns
returns <-
tidydata %>%
group_by(Tickers) %>%
mutate(Returns = Scores/lag(Scores) - 1) %>%
mutate(LogReturns = (log(Returns) - log(lag(Returns))))
# period 1
period1summary <-
returns %>%
filter(Date >= ymd(20060518) & Date<= ymd(20081231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table1 <-
xtable(period1summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2006-2008 \\label{tab1}")
print.xtable(table1,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
# period 2
period2summary <-
returns %>%
filter(Date >= ymd(20100101) & Date<= ymd(20131231)) %>%
group_by(Tickers) %>%
summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>%
tbl_df()
table2 <-
xtable(period2summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2010-2013 \\label{tab2}")
print.xtable(table2,
floating = TRUE,
table.placement = 'H',
comment = FALSE,
caption.placement = 'bottom'
)
# Write to project folder
write.csv(dailydata, path = file.path('/data', "findata.csv"))
load_pkg("parallel")
plot(x = dailydata$Date, y = dailydata$ABSP)
# Write to project folder
write.csv(dailydata, path = file.path("findata.csv"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv",
col_types = cols(.default = "d", Date = "D"))
# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)
# Write to project folder
write.csv(dailydata, path = file.path("findata.csv"))
# Write to project folder
write.csv(dailydata, file = "findata.csv")
# Write to project folder
write.csv(dailydata, file = "findata.csv", file.path('/data'))
# Write to project folder
write.csv(dailydata, file = "findata.csv", file.path = ('/data'))
# Write to project folder
write.csv(dailydata, path = file.path('/data/'), file = "findata.csv")
# Write to project folder
write.csv(dailydata, path = file.path("/data/"), file = "findata.csv")
??read.csv
# Write to project folder...still struggling a bit to do this, i.e. to save it to a specific folder in my WD
write.csv(dailydata, file = "findata.csv") # I am not sure if I remember how to write the data to a specific folder.
View(returns)
View(returns)
drop.cols <- c('Scores', 'LogReturns')
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
View(wide_returns)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.locf()
View(wide_returns)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
View(wide_returns)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.rm=TRUE
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.rm=TRUE
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.rm=TRUE
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
View(wide_returns)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.locf()
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>%
na.locf.default()
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
#load_pkg("parallel")
cl = makePSOCKcluster(10)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns)
#make the portfolio
porteqw = Return.portfolio(wide_returns, weight = NULL, geometric = FALSE)
wide_returns <- returns %>%
select(-c(Scores, LogReturns)) %>%
spread(Tickers, Returns) %>% tbl_xts()
#make the portfolio
porteqw = Return.portfolio(wide_returns, weight = NULL, geometric = FALSE)
View(porteqw)
AC = autoarfima(as.numeric(porteqw), ar.max = 2, ma.max = 2,
criterion = "AIC", method = "partial", arfima = FALSE, include.mean = NULL,
distribution.model = "norm", solver = "solnp", cluster = cl)
show(head(AC$rank.matrix))
load_pkg(c("devtools", "rugarch", "forecast", "tidyr", "tbl2xts", "lubridate", "readr", "PerformanceAnalytics"))
load_pkg(rugarch)
if (!require("rugarch")) install.packages("rugarch")
library(rugarch)
AC = autoarfima(as.numeric(porteqw), ar.max = 2, ma.max = 2,
criterion = "AIC", method = "partial", arfima = FALSE, include.mean = NULL,
distribution.model = "norm", solver = "solnp", cluster = cl)
garch11 <-
ugarchspec(
variance.model = list(model = c("sGARCH","gjrGARCH","eGARCH","fGARCH","apARCH")[1],
garchOrder = c(1, 1)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
distribution.model = c("norm", "snorm", "std", "sstd", "ged", "sged", "nig", "ghyp", "jsu")[1])
garchfit1 = ugarchfit(spec = garch11, data = as.numeric(porteqw))
View(garchfit1)
plot(garchfit1, which = "all")
plot(garchfit1, which = "all")
garch11 <-
ugarchspec(
variance.model = list(model = c("sGARCH","gjrGARCH","eGARCH","fGARCH","apARCH")[1],
garchOrder = c(2, 2)),
mean.model = list(armaOrder = c(1, 0), include.mean = TRUE),
distribution.model = c("norm", "snorm", "std", "sstd", "ged", "sged", "nig", "ghyp", "jsu")[1])
garchfit1 = ugarchfit(spec = garch11, data = as.numeric(porteqw))
