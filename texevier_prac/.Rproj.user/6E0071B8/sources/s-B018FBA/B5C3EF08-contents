---
title: "Readme"
author: "PA HIRST"
date: "October 12, 2018"
output: html_document
---

## Purpose
The purpose of this README is to walk through the programming required for the practical submission dealing with Texevier, and getting used to its environment and how it works.

This README will include most of my data wrangling (actually not as it seems one must do the data wrangling either in a fucntional environment or directly in the template Rmd). Since I have not yet been able to get accustomed to creating functions and sourcing them in the template, I do all data wrangling here as well.

I start by loading the data:
```{r Load data and packages}
library(rmsfuns)
load_pkg(c("tidyverse", "devtools", "rugarch", "forecast", "tbl2xts", 
    "lubridate", "PerformanceAnalytics", "ggthemes"))
dailydata <- read_csv("https://raw.githubusercontent.com/Nicktz/ExDat/master/extdata/findata.csv", 
    col_types = cols(.default = "d", Date = "D"))
```

The code chunk below creates the returns for each of the stocks:
```{r}
# Load the necessary packages
library(xtable)
library(psych)
library(rmsfuns)

# Change the column names to make it more readable
colnames(dailydata) <-
colnames(dailydata) %>% gsub("JSE.","",.) %>% gsub(".Close","",.)

# Write to project folder...still struggling a bit to do this, i.e. to save it to a specific folder in my WD
write.csv(dailydata, file = "findata.csv") # I am not sure if I remember how to write the data to a specific folder.

#tidy it up
tidydata <- 
dailydata %>% 
  gather(key = Tickers, value = Scores, -Date)

#Calculate returns
returns <- 
tidydata %>% 
  group_by(Tickers) %>% 
  mutate(Returns = Scores/lag(Scores) - 1) %>% 
  mutate(LogReturns = (log(Returns) - log(lag(Returns))))

# period 1
period1summary <- 
  returns %>%
  filter(Date >= ymd(20060518) & Date<= ymd(20081231)) %>% 
  group_by(Tickers) %>% 
  summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>% 
  tbl_df()

table1 <-
  xtable(period1summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2006-2008 \\label{tab1}")
  print.xtable(table1, 
             floating = TRUE, 
             table.placement = 'H',
             comment = FALSE, 
             caption.placement = 'bottom'
            )

# period 2
period2summary <- 
  returns %>%
  filter(Date >= ymd(20100101) & Date<= ymd(20131231)) %>% 
  group_by(Tickers) %>% 
  summarise(mean = mean(Returns, na.rm = T), variance = var(Returns, na.rm = T)) %>% 
  tbl_df()

table2 <-
  xtable(period2summary %>% mutate_at(vars(-Tickers), funs(paste0(round(.*100, 2), "%"))), caption = "Summary of the first and second moments of a portfolio of stocks: 2010-2013 \\label{tab2}")
  print.xtable(table2, 
             floating = TRUE, 
             table.placement = 'H',
             comment = FALSE, 
             caption.placement = 'bottom'
            )
```
Now, in the code chunk below, I calculate the full sample correlations between the stocks. It is possible to do this in very few lines of code. In fact, one can merely "print" it in the pdf at the bottom.
```{r Correlations}
print.xtable(xtable(cor(dailydata[, c(2:8)], use = "complete.obs"),
                    caption = "Full sample correlations between stocks \\label{correlations}"),
             floating = T,
             table.placement = 'H',
             scalebox = "0.7",
             comment = F,
             caption.placement = 'bottom'
)
```

The next task, which I tackle in the code chunk below, is to create a portfolio, of all the stocks in my sample. The portfolio is then used to calculate the cumulative returns.  
```{r}
if (!require("rportfolios")) install.packages("rportfolios")
library(rportfolios)
library(ggthemes)

# Drop the unnecessary
returns$LogReturns <- NULL
returns$Scores <- NULL
#Create a group of tickers, in this case all of them that will be used in the portfolio
# This is not necessary seeing as we are using all the Tickers

# Rebalancing
RebMonths <- c(6)

# Create the weights vector 
Weights <-
returns %>%
  mutate(Months = as.double(format(Date, format = "%m")), YearMonths = as.double(format(Date, format = "%Y%m"))) %>%
  filter(Months %in% RebMonths) %>% 
  group_by(YearMonths, Months, Tickers) %>% 
  filter(Date == last(Date)) %>%
  ungroup()

# Now we have to add the actual weights to the vector at each rebalancing 
Weights_adj <- 
  Weights %>% 
  group_by(Date) %>% 
  mutate(EqualWeights = 1/n()) %>% 
  ungroup() %>% 
  select(-Months, -YearMonths)

# Next task is to create a portfollio 
library(PerformanceAnalytics)

Fund_Size_at_Start <- 1000

# Remember when using PA, the data must be xts and wide
# Create the equal weights to feed into the function later on
EW_weights <- Weights_adj %>% 
  select(Date, Tickers, EqualWeights) %>%
  spread(Tickers, EqualWeights) %>% tbl_xts()

# Isolate the returns
df_Returns <- returns %>% spread(Tickers, Returns)
df_Returns[is.na(df_Returns)] <- 0 # this sets the NA values to zero
xts_df_Returns <- df_Returns %>% tbl_xts() # basically, here we just get the returns in xts format

# Create the equally weighted portfolio
EW_RetPort <- Return.portfolio(xts_df_Returns, weights = EW_weights,
verbose = TRUE, contribution = TRUE, value = Fund_Size_at_Start,
geometric = TRUE)

# Clean and save portfolio returns and weights:
EW_Contribution <- 
  EW_RetPort$contribution %>% 
  xts_tbl() %>%
  mutate(date = lag(date), date = coalesce(date, index(EW_weights)[1]))

EW_BPWeight <- 
  EW_RetPort$BOP.Weight %>% 
  xts_tbl() %>% 
  mutate(date = lag(date),
  date = coalesce(date, index(EW_weights)[1]))

EW_BPValue <- 
  EW_RetPort$BOP.Value %>% 
  xts_tbl() %>% 
  mutate(date = lag(date),
  date = coalesce(date, index(EW_weights)[1]))

# Names
names(EW_Contribution) <- c("date", names(EW_RetPort$contribution))
names(EW_BPWeight) <- c("date", names(EW_RetPort$BOP.Weight))
names(EW_BPValue) <- c("date", names(EW_RetPort$BOP.Value))

# Bind  everything together
df_port_return_EW <- 
  left_join(returns %>% 
              rename(date = Date),
EW_BPWeight %>% 
  gather(Tickers, weight, -date), by = c("date",
  "Tickers")) %>% left_join(., EW_BPValue %>% gather(Tickers,
  value_held, -date), by = c("date", "Tickers")) %>% 
  left_join(.,
EW_Contribution %>% 
  gather(Tickers, Contribution, -date),
  by = c("date", "Tickers"))

# Portfolio return
df_Portf_EW <- df_port_return_EW %>% group_by(date) %>% summarise(PortfolioReturn = sum(Returns *
weight, na.rm = TRUE)) %>% filter(PortfolioReturn != 0)


```

This chunk below includes the calculations necessary to plot univariate GARCH models of all of the series:
```{r}

```


After doing tyhe necessary calcs above, I calculate the portfolio cumulative return and plot it using ggplot. This is done in two stages in the code chunk below.
```{r cumulative return ggplot}
# Portfolio cumulative return
Cum_EW <- 
  df_Portf_EW %>% 
  mutate(cumreturn_EW = (cumprod(1 +
  PortfolioReturn) - 1)) %>% 
  mutate(wealthindex_EW = 100 *
  (cumprod(1 + PortfolioReturn))) %>% select(-PortfolioReturn)

# Now we can go ahead and plot the wealth index (i.e. if you invested R100 yesterday, how much would you have now?)
Cum_EW %>%
  ggplot() +
  geom_line(aes(date, wealthindex_EW, color = "wealth index")) +
  theme_bw() + labs(x = "Date", y = "Growth")

# This will then plot the cumulative returns for portfolio, which is exactly what we are looking for.
```

