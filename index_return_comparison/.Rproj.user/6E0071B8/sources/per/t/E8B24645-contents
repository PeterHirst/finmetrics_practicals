---
title: "README"
author: "PA HIRST"
date: "September 3, 2018"
output: html_document
---
The purpose of this README is to walk through the practical work based on the "tidyverse" package and its subsidiaries. 

First, let's install any necessary packages and load the data:
```{r}
library(tidyverse)
library(rmsfuns)
library(lubridate)
Daily_TRI <- 
read_rds("data/Fin_Data_SA_US_NKY.rds")
```

This is a bit of extra code that preceded the DIY:
```{r}
Daily_TRI %>% head()
Daily_TRI %>% pull(Short.Name ) %>% unique() %>% View

Daily_TRI_BigthreeTech <- 
Daily_TRI %>% 
  filter(Short.Name %in% c( "NASPERS LTD-N", "APPLE INC", "ALPHABET INC-A")) %>% 
  group_by(Ticker) %>% mutate(Returns = TRI/lag(TRI) - 1) %>% ungroup()

Daily_TRI_BigthreeTech_with_cumulative_returns <- 
Daily_TRI_BigthreeTech %>% 
  mutate(Returns = coalesce(Returns, 0)) %>%  # Override Return column NAs...
  group_by(Ticker) %>%
  mutate(Cum_Return = cumprod( 1 + Returns))

```

This is the real work starts (DYI, I mean "DIY""). Now, we are working with the Daily_TRI data.

I will first change the name of the data to "data", to make the analysis easier:
```{r}
data <- Daily_TRI
```
Then rename the columns:
```{r}
names(data) <- c("date", "ticker", "index", "name", "cap", "sector", "industry", "country")
```

First question, cap-weighted monthly index returns for each sector for each country:
```{r}
monthlyreturns <- 
data %>% 
  mutate(year_month = format(date, "%Y%B")) %>% 
  group_by(year_month, ticker) %>% 

# Now filter to just have the last date of each month, as we are essentially calculating 
#"monthly" returns
filter(date == last(date)) %>%
  ungroup() %>% 
  
#Calculate the monthly returns by ticker
group_by(ticker) %>% 
  mutate(monthly_returns = index/lag(index) - 1) %>% 
  mutate(monthly_returns = coalesce(monthly_returns, 0)) %>% 
  ungroup() %>% 
  
# Next we want to add up the market cap by sector
group_by(country, sector, date) %>%  #this makes sense - understand the order of grouping!
mutate(sector_cap=sum(cap)) %>% 
  
# Calculate the weight
mutate(weight= cap/sector_cap) %>% #delete this?
  
# Calculate the weighted indices by multiplying the TRI (index) by the weight above
mutate(weighted_index_return = sum(monthly_returns*weight)) %>% #each ticker (company) then has a weighted index
summarise(weighted_monthly_returns = mean(weighted_index_return))
```

The next task is to calculate the sharpe ratios for the cap-weighted returns
```{r}
Sharpe_ratios <- 
monthlyreturns %>% 
  mutate(Sharpe = mean(weighted_monthly_returns, na.rm = T)/sd(weighted_monthly_returns, na.rm = T)) %>% 
  print(Sharpe)
```
Now, I am going to plot all the cumulative returns for the Financials indexes of the three countries and  whose Financials index outperformed:
```{r}
cumreturns_financials <- 
monthlyreturns %>% 
  filter(sector %in% c("Financials")) %>% 
  group_by(country) %>% 
  mutate(monthly_cumreturns = cumprod( 1 + weighted_monthly_returns)) %>% 
  group_by(date, country) %>% 
ungroup()
```
We now need to plot the returns, which we will do using ggplot2: 
```{r}
library("ggplot2")

#cumreturns_financials %>% 
 # group_by(date, country) %>% 
  #print(cumreturns_financials)
plot_cumreturns_financials <- 
cumreturns_financials %>% 
  ggplot() +
  geom_line(aes(x=date, y=monthly_cumreturns, colour = country))
print(plot_cumreturns_financials)

```
  
  
Now, I am going to do the 60 day rolling standard deviation, for the Materials sectors of each country:
```{r}
library("PerformanceAnalytics")
library("xts", "zoo", "tbl_xts")
library("rmsfuns")
# Now, we go ahead with the coding
xts_dailyreturns_materials <- 
data %>%
  group_by(ticker) %>% 
  filter(sector %in% c("Materials")) %>%
  mutate(daily_returns = index/lag(index) -1) %>%
  mutate(daily_returns = coalesce(daily_returns, 0)) %>% 
  ungroup() %>%
  group_by(country, date) %>%
  summarise(mean_daily_returns = mean(daily_returns)) %>% 
  ungroup() %>% 
  tbl2xts::tbl_xts(.,cols_to_xts = "mean_daily_returns", spread_by = "country")

chart.RollingPerformance(R = xts_dailyreturns_materials, FUN = "sd", width = 4, main = "Rolling 60 day sd of the materials sector")
```
THE END.
